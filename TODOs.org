
* manifest.json
** canonical documentation?

Michael Perry
4:06 PM
https://github.com/flywheel-io/gears/tree/master/spec
https://github.com/flywheel-io/gears/blob/master/spec/manifest.schema.json
Exchange: https://github.com/flywheel-io/exchange

Michael Perry
4:29 PM
https://github.com/scitran/core/blob/master/api/filetypes.json

there is an example-gear which provides a good example, but may be there is more?

*** what values are known to inputs.type.enum for base "file"?

mri-deface/manifest.json:  "inputs": {
mri-deface/manifest.json-    "anatomical": {
mri-deface/manifest.json-      "base": "file",
mri-deface/manifest.json-      "type": {
mri-deface/manifest.json-        "enum": [
mri-deface/manifest.json-          "nifti",
mri-deface/manifest.json-          "mgh",
mri-deface/manifest.json-          "dicom"
mri-deface/manifest.json-        ]
mri-deface/manifest.json-      }
mri-deface/manifest.json-    }

*** how to specify an option which could have a single, or multiple values (from a set/Enum)?

probably should be enough to just deal with a list

*** how does it matter?

** could manifest.json have some custom/arbitrary field(s)? (I could use them for some meta-data for the later nipype runner)

custom

** what 'input's could be?  only files?

yes

** **requires** any way to describe that an option is required only if some other (optional) option is specified?
** **xor** to describe that one input should be specified but not the other

** to make sure: 'outputs' are nohow "prescribed", correct?

** configuration is stored  in multiple places and differently?

if [[ -f $CONFIG_FILE ]]; then
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value)"' $CONFIG_FILE)
else
  CONFIG_FILE=$FLYWHEEL_BASE/manifest.json
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value.default)"' $CONFIG_FILE)
fi


* Generic

** any good "json selector" so I could quickly query fields among bunch of sample manifest.json files?
** any easy way to 'fetch all gears sources'?

git submodule   or  mr ...?


* TODOs for me
** inputs could be enum base file and list supported "formats"

so I need to deduce/annotate since no information is present within nipype interface definition

** check if any interesting logs are in html so we could also use webpage2html

** ENV preservation way

# ENV preservation for Flywheel Engine
RUN env -u HOSTNAME -u PWD | \
  awk -F = '{ print "export " $1 "=\"" $2 "\"" }' > ${FLYWHEEL}/docker-env.sh


* TODO Q: how does UI know where to stick inputs and where to look for outputs?

$> grep INPUT_DIR= */run      
bxh-xcede-tools-qa/run:INPUT_DIR=$FLYWHEEL_BASE/input/fmri_dicom_input
fmriprep/run:INPUT_DIR=$FLYWHEEL_BASE/input
fsl-feat/run:INPUT_DIR=$FLYWHEEL_BASE/input/NIFTI
mri-deface/run:INPUT_DIR=$FLYWHEEL_BASE/input/anatomical
mriqc/run:INPUT_DIR=$FLYWHEEL_BASE/input/nifti

so could be all over?

* TODO "License" field should allow for the list

Unlikely any particular gear is covered by a single license...
Hard to say where to define the boundary -- since any gear probably carries/uses
lots of different pieces.  So what kind of a license should be mentioned? of the
underlying piece or my idea what my work in construction of the gear is licensed
under?

* TODO  could "name" contain upper case, why not?

* TODO  enum difficulty

schema seems to be different between inputs and config

inputs:

fsl-feat/manifest.json-    "NIFTI": {
fsl-feat/manifest.json-      "description": "Anatomical NIfTI image, or multi-channel set of images, to be segmented.",
fsl-feat/manifest.json-      "base": "file",
fsl-feat/manifest.json-      "type": {
fsl-feat/manifest.json:        "enum": [
fsl-feat/manifest.json-          "nifti"
fsl-feat/manifest.json-        ]
fsl-feat/manifest.json-      }


config:

mriqc/manifest.json-    "measurement": {
mriqc/manifest.json-      "default": "Functional",
mriqc/manifest.json-      "description": "Type of input image. Can be either 'T1w', 'T2w' or 'Functional' (default='Functional').",
mriqc/manifest.json-      "type": "string",
mriqc/manifest.json:      "enum": [
mriqc/manifest.json-        "Functional",
mriqc/manifest.json-        "T1w",
mriqc/manifest.json-        "T2w"
mriqc/manifest.json-      ]

