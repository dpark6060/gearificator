
* manifest.json
** canonical documentation?

Michael Perry
4:06 PM
https://github.com/flywheel-io/gears/tree/master/spec
https://github.com/flywheel-io/gears/blob/master/spec/manifest.schema.json
Exchange: https://github.com/flywheel-io/exchange

Michael Perry
4:29 PM
https://github.com/scitran/core/blob/master/api/filetypes.json

there is an example-gear which provides a good example, but may be there is more?

*** what values are known to inputs.type.enum for base "file"?

mri-deface/manifest.json:  "inputs": {
mri-deface/manifest.json-    "anatomical": {
mri-deface/manifest.json-      "base": "file",
mri-deface/manifest.json-      "type": {
mri-deface/manifest.json-        "enum": [
mri-deface/manifest.json-          "nifti",
mri-deface/manifest.json-          "mgh",
mri-deface/manifest.json-          "dicom"
mri-deface/manifest.json-        ]
mri-deface/manifest.json-      }
mri-deface/manifest.json-    }

*** how to specify an option which could have a single, or multiple values (from a set/Enum)?

probably should be enough to just deal with a list

*** how does it matter?

** could manifest.json have some custom/arbitrary field(s)? (I could use them for some meta-data for the later nipype runner)

custom

** what 'input's could be?  only files?

yes

** **requires** any way to describe that an option is required only if some other (optional) option is specified?
** **xor** to describe that one input should be specified but not the other

** to make sure: 'outputs' are nohow "prescribed", correct?

** configuration is stored  in multiple places and differently?

if [[ -f $CONFIG_FILE ]]; then
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value)"' $CONFIG_FILE)
else
  CONFIG_FILE=$FLYWHEEL_BASE/manifest.json
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value.default)"' $CONFIG_FILE)
fi


* Generic

** any good "json selector" so I could quickly query fields among bunch of sample manifest.json files?
** any easy way to 'fetch all gears sources'?

git submodule   or  mr ...?


* TODOs for me
** TODO inputs could be enum base file and list supported "formats"

so I need to deduce/annotate since no information is present within nipype interface definition

** TODO check if any interesting logs are in html so we could also use webpage2html

** ENV preservation way

# ENV preservation for Flywheel Engine
RUN env -u HOSTNAME -u PWD | \
  awk -F = '{ print "export " $1 "=\"" $2 "\"" }' > ${FLYWHEEL}/docker-env.sh


* Q: how does UI know where to stick inputs and where to look for outputs?

$> grep INPUT_DIR= */run      
bxh-xcede-tools-qa/run:INPUT_DIR=$FLYWHEEL_BASE/input/fmri_dicom_input
fmriprep/run:INPUT_DIR=$FLYWHEEL_BASE/input
fsl-feat/run:INPUT_DIR=$FLYWHEEL_BASE/input/NIFTI
mri-deface/run:INPUT_DIR=$FLYWHEEL_BASE/input/anatomical
mriqc/run:INPUT_DIR=$FLYWHEEL_BASE/input/nifti

so could be all over?   nah -- matches the names of inputs.  outputs are indeed a "wild card"

* "License" field should allow for the list -- 

Unlikely any particular gear is covered by a single license...
Hard to say where to define the boundary -- since any gear probably carries/uses
lots of different pieces.  So what kind of a license should be mentioned? of the
underlying piece or my idea what my work in construction of the gear is licensed
under?

* could "name" contain upper case, why not?

* enum difficulties

** schema seems to be different between inputs and config

inputs: 

fsl-feat/manifest.json-    "NIFTI": {
fsl-feat/manifest.json-      "description": "Anatomical NIfTI image, or multi-channel set of images, to be segmented.",
fsl-feat/manifest.json-      "base": "file",
fsl-feat/manifest.json-      "type": {
fsl-feat/manifest.json:        "enum": [
fsl-feat/manifest.json-          "nifti"
fsl-feat/manifest.json-        ]
fsl-feat/manifest.json-      }


config:

mriqc/manifest.json-    "measurement": {
mriqc/manifest.json-      "default": "Functional",
mriqc/manifest.json-      "description": "Type of input image. Can be either 'T1w', 'T2w' or 'Functional' (default='Functional').",
mriqc/manifest.json-      "type": "string",
mriqc/manifest.json:      "enum": [
mriqc/manifest.json-        "Functional",
mriqc/manifest.json-        "T1w",
mriqc/manifest.json-        "T2w"
mriqc/manifest.json-      ]

** could it be for ints at all?   had to be  "integer" but there is more to it

    def validate(self, *args, **kwargs):
        for error in self.iter_errors(*args, **kwargs):
>           raise error
E           ValidationError: {u'default': 3, u'optional': True, u'enum': [3, 2], u'type': u'int', u'description': u'Dimension [default=3]'} is not valid under any of the given schemas
E
E           Failed validating u'oneOf' in schema[u'properties'][u'config'][u'additionalProperties']:
E               {u'description': u'A schema directive.',
E                u'oneOf': [{u'$ref': u'http://json-schema.org/draft-04/schema'}]}
E
E           On instance[u'config'][u'dimension']:
E               {u'default': 3,
E                u'description': u'Dimension [default=3]',
E                u'enum': [3, 2],
E                u'optional': True,
E                u'type': u'int'}


* TODOREMAINS  example of jq query to get all enums in config or inputs?

*  "official" way to mount things -- separately for config.json, inputs, and outputs?

  officially there is v0/input and v0/output (no s)

* TODO List handling.   will not specify default empty []
* TODO exchange -- should I aim to provide 'gearificator/' under https://github.com/flywheel-io/exchange/tree/master/gears

  - should contain just manifests renamed into name.json
  - could I also contain there the actual gear "sources" (Dockerfile, run) somewhere, e.g. under name/ subdirectory

* TODO -- it seems that among gears examples I looked at "optional" only used among "inputs" and not among "config"

this might explain why web ui did not allow me to go forward until I actually entered a value for an optional config -- it was not "warranted"

* TODO -- so docker image.  gw wants custom.gear-builder.image.  All gears have custom.docker-image  .  Why custom for gear-builder???

* TODO: fw gear remove ??

 - Could not upload a new one to overload previous:

	hopa:/tmp/gearificator_output
	$> fw gear upload --category analysis
	Output folder exists and will be deleted as part of the upload process.
	Continue? (yes/no): yes

	Checking that gear is ready to upload...
	(500) Gear "nipype-interfaces-fsl-preprocess-bet-dummy" version "0.0.1.nipype.0.14.0-dummy" already exists, consider changing the version string.

 - did not find in web ui on how to remove a gear?!


